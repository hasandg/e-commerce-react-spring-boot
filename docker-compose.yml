services:
  # Infrastructure Services
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      # KRaft mode settings
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://kafka:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    volumes:
      - ./volumes/kafka:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - e-commerce-network

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: ecommerce, keycloak
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - e-commerce-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/admin --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - e-commerce-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - e-commerce-network

  # Core Spring Cloud Services
  config-server:
    build: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: native
      SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS: /config
    volumes:
      - ./config-server/src/main/resources/config:/config
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - e-commerce-network

  discovery-service:
    build: ./discovery-service
    container_name: discovery-service
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_CONFIG_IMPORT: optional:configserver:http://config-server:8888
      SPRING_CLOUD_CONFIG_ENABLED: false
    depends_on:
      - config-server
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - e-commerce-network

  gateway-service:
    build: ./gateway-service
    container_name: gateway-service
    ports:
      - "8765:8765"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_CONFIG_IMPORT: optional:configserver:http://config-server:8888
      SPRING_CLOUD_CONFIG_ENABLED: false
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/ecommerce/protocol/openid-connect/certs"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI: "http://keycloak:8080/realms/ecommerce"
    depends_on:
      - discovery-service
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8765/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - e-commerce-network

  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: keycloak
    ports:
      - "9090:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=postgres
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HEALTH_ENABLED=true
      - KC_METRICS_ENABLED=true
      - KC_FEATURES=token-exchange,scripts
      - KC_HTTP_RELATIVE_PATH=/
      # CORS configuration
      - KC_CORS=true
      - KC_CORS_ALLOWED_ORIGINS=*
      - KC_CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - KC_CORS_ALLOWED_HEADERS=*
      - KC_CORS_EXPOSED_HEADERS=*
      - KC_CORS_ALLOW_CREDENTIALS=true
      - KC_CORS_MAX_AGE=3600
    volumes:
      - ./keycloak/realms:/opt/keycloak/data/import
    command:
      - start-dev
      - --import-realm
    networks:
      - e-commerce-network
    depends_on:
      - postgres
    restart: always

volumes:
  kafka_data:
  postgres_data:
  mongodb_data:
  redis_data:

networks:
  e-commerce-network:
    driver: bridge 